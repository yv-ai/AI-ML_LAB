{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### **Experiment 4: Data Import and Basic Information Using Pandas**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. **Importing Pandas:** `import pandas as pd`\n",
    "   - Imports the Pandas library, which is essential for data manipulation in Python."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing the necessary library\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. **Reading the CSV file:** `df = pd.read_csv('data.csv')`\n",
    "   - Reads the dataset from a CSV file. Replace `'data.csv'` with your actual file path."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reading the dataset from a CSV file\n",
    "# 'data.csv' should be replaced with the actual dataset file path\n",
    "df = pd.read_csv('data.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. **Shape of the Data:** `rows, cols = df.shape`\n",
    "   - Retrieves the number of rows and columns in the dataset.\n",
    "   \n",
    "4. **Print Number of Rows and Columns:** `print(f\"Number of Rows: {rows}\")`\n",
    "   - Prints the total number of rows and columns in the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of Rows: 307\n",
      "Number of Columns: 16\n"
     ]
    }
   ],
   "source": [
    "# Getting the shape of the dataset (number of rows and columns)\n",
    "rows, cols = df.shape\n",
    "print(f\"Number of Rows: {rows}\")\n",
    "print(f\"Number of Columns: {cols}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5. **First Five Rows:** `print(df.head())`\n",
    "   - Displays the first 5 rows of the dataset to quickly examine the structure and contents."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "First Five Rows:\n",
      "   id             name               nationality                 city  \\\n",
      "0   0        Kiana Lor                     China               Suzhou   \n",
      "1   1   Joshua Lonaker  United States of America        Santa Clarita   \n",
      "2   2    Dakota Blanco  United States of America              Oakland   \n",
      "3   3  Natasha Yarusso  United States of America        Castro Valley   \n",
      "4   4   Brooke Cazares                    Brazil  São José dos Campos   \n",
      "\n",
      "   latitude  longitude gender  ethnic.group  age  english.grade  math.grade  \\\n",
      "0     31.31     120.62      F           NaN   22            3.5         3.7   \n",
      "1     34.39    -118.54      M           NaN   22            2.9         3.2   \n",
      "2     37.80    -122.27      F           NaN   22            3.9         3.8   \n",
      "3     37.69    -122.09      F           NaN   20            3.3         2.8   \n",
      "4    -23.18     -45.88      F           NaN   21            3.7         2.6   \n",
      "\n",
      "   sciences.grade  language.grade  portfolio.rating  coverletter.rating  \\\n",
      "0             3.1             1.0                 4                 4.0   \n",
      "1             3.6             5.0                 5                 4.0   \n",
      "2             3.2             5.0                 3                 3.0   \n",
      "3             3.2             5.0                 5                 2.0   \n",
      "4             3.4             1.0                 4                 4.0   \n",
      "\n",
      "   refletter.rating  \n",
      "0                 4  \n",
      "1                 5  \n",
      "2                 4  \n",
      "3                 4  \n",
      "4                 5  \n"
     ]
    }
   ],
   "source": [
    "# Displaying the first 5 rows of the dataset to get a glimpse of the data\n",
    "print(\"\\nFirst Five Rows:\")\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "6. **Size of the Dataset:** `print(f\"\\nSize of Dataset: {df.size})`\n",
    "   - The `size` attribute returns the total number of elements in the DataFrame (rows × columns)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Size of Dataset: 4912\n"
     ]
    }
   ],
   "source": [
    "# Calculating the total number of elements (rows * columns) in the dataset\n",
    "print(f\"\\nSize of Dataset: {df.size}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "7. **Checking Missing Values:** `print(df.isnull().sum())`\n",
    "   - Identifies how many missing (null) values exist in each column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Number of Missing Values:\n",
      "id                      0\n",
      "name                    0\n",
      "nationality             0\n",
      "city                    0\n",
      "latitude                0\n",
      "longitude               0\n",
      "gender                  0\n",
      "ethnic.group          307\n",
      "age                     0\n",
      "english.grade           0\n",
      "math.grade              0\n",
      "sciences.grade          0\n",
      "language.grade          0\n",
      "portfolio.rating        0\n",
      "coverletter.rating      0\n",
      "refletter.rating        0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Checking for missing values in each column\n",
    "print(\"\\nNumber of Missing Values:\")\n",
    "print(df.isnull().sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "8. **Sum, Average, Min, Max:** `df.select_dtypes(include='number').sum()`\n",
    "   - These commands calculate and display the sum, average (mean), minimum, and maximum of numerical columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Sum of Numerical Columns:\n",
      "id                    46971.00\n",
      "latitude              10089.06\n",
      "longitude            -19813.51\n",
      "ethnic.group              0.00\n",
      "age                    6743.00\n",
      "english.grade          1034.50\n",
      "math.grade             1048.20\n",
      "sciences.grade         1058.10\n",
      "language.grade         1349.70\n",
      "portfolio.rating       1224.00\n",
      "coverletter.rating     1262.00\n",
      "refletter.rating       1286.00\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Calculating and displaying the sum of all numerical columns\n",
    "print(\"\\nSum of Numerical Columns:\")\n",
    "print(df.select_dtypes(include='number').sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Average of Numerical Columns:\n",
      "id                    153.000000\n",
      "latitude               32.863388\n",
      "longitude             -64.539121\n",
      "ethnic.group                 NaN\n",
      "age                    21.964169\n",
      "english.grade           3.369707\n",
      "math.grade              3.414332\n",
      "sciences.grade          3.446580\n",
      "language.grade          4.396417\n",
      "portfolio.rating        3.986971\n",
      "coverletter.rating      4.110749\n",
      "refletter.rating        4.188925\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Calculating and displaying the mean (average) of numerical columns\n",
    "print(\"\\nAverage of Numerical Columns:\")\n",
    "print(df.select_dtypes(include='number').mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "9. **Exporting the Data:** `df.to_csv('exported_data.csv', index=False)`\n",
    "   - Saves the dataset back to a CSV file. This is useful if modifications were made and you want to save the updated data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Min of Numerical Columns:\n",
      "id                      0.00\n",
      "latitude              -33.45\n",
      "longitude            -123.13\n",
      "ethnic.group             NaN\n",
      "age                    19.00\n",
      "english.grade           1.50\n",
      "math.grade              2.10\n",
      "sciences.grade          1.40\n",
      "language.grade          1.00\n",
      "portfolio.rating        1.00\n",
      "coverletter.rating      1.00\n",
      "refletter.rating        1.00\n",
      "dtype: float64\n",
      "\n",
      "Max of Numerical Columns:\n",
      "id                    306.00\n",
      "latitude               59.89\n",
      "longitude             139.75\n",
      "ethnic.group             NaN\n",
      "age                    26.00\n",
      "english.grade           4.00\n",
      "math.grade              4.00\n",
      "sciences.grade          4.00\n",
      "language.grade          5.00\n",
      "portfolio.rating        5.00\n",
      "coverletter.rating      5.00\n",
      "refletter.rating        5.00\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Calculating and displaying the minimum values from numerical columns\n",
    "print(\"\\nMin of Numerical Columns:\")\n",
    "print(df.select_dtypes(include='number').min())\n",
    "\n",
    "# Calculating and displaying the maximum values from numerical columns\n",
    "print(\"\\nMax of Numerical Columns:\")\n",
    "print(df.select_dtypes(include='number').max())\n",
    "\n",
    "# Exporting the dataset back to a CSV file (optional)\n",
    "# This can be useful if you have made changes to the data\n",
    "df.to_csv('exported_data.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
